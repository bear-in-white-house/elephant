"""
Django settings for elephant project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6n!*3%&u+5kua8wv1li71tf@tt^$16^#wrkg%r663#chmb&&0!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

START_APP = [
    'account',
    'config'
]

THIRD_APP = [
]

INSTALLED_APPS.extend(THIRD_APP)
INSTALLED_APPS.extend(START_APP)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': 'postgresql',
        'PORT': '5432'
    }
}

MIDDLEWARE = [
    'elephant.middleware.RequestIdMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'elephant.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'elephant.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

REDIS_HOST = os.environ.get('REDIS_HOST', 'redis')
REDIS_CACHE_LOCATION = f'redis://{REDIS_HOST}:6379'

# “django-redis” must be pip installed
CACHES = {
    'default': {
        "BACKEND": 'redis_cache.RedisCache',
        'LOCATION': REDIS_CACHE_LOCATION,
        'TIMEOUT': 259200,
        'OPTIONS': {
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            'IGNORE_EXCEPTIONS': True,
        }
    },
}

SESSION_COOKIE_AGE = 60 * 60 * 24   # one day
SESSION_SAVE_EVERY_REQUEST = True
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = 'static'
STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload')
MEDIA_URL = '/upload/'

# celery
CELERY_BROKER_URL = os.environ.get('BROKER_URL')
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_RESULT_BACKEND = 'rpc://'

# 短信验证码类
MSG_PROVIDER = 'elephant.utils.AliMsgCode'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'elephant.utils.authentications.ElephantAuthentication',
    ),
}


log_level = 'DEBUG'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s][%(name)s:%(lineno)s][%(levelname)s] %(message)s',
            'datefmt': '%Y/%b/%d %H:%M:%S'
        },
        'colored': {
            '()': 'colorlog.ColoredFormatter',
            'format': '[%(log_color)s%(asctime)s%(reset)s][%(request_id)s][%(name)s:%(lineno)s][%(log_color)s%(levelname)s%(reset)s] %(message)s',
            'datefmt': '%Y/%b/%d %H:%M:%S',
            'log_colors': {
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'bold_yellow',
                'ERROR': 'red',
                'CRITICAL': 'red,bg_white'},
            'secondary_log_colors': {},
            'style': '%'}, },
    'filters': {
        'request_id': {'()': 'elephant.logging_filters.RequestIDFilter'}},
    'handlers': {
        'console': {
            'level': log_level,
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
            'filters': ['request_id']},
        'sls_handler': {'class': 'aliyun.log.QueuedLogHandler',
                        'level': 'INFO',
                         'formatter': 'colored',
                         # custom args:
                         'end_point': os.environ.get('ALIYUN_LOG_SAMPLE_ENDPOINT'),
                         'access_key_id': os.environ.get('ALIYUN_LOG_SAMPLE_ACCESSID'),
                         'access_key': os.environ.get('ALIYUN_LOG_SAMPLE_ACCESSKEY'),
                         'project': 'elephantbar',
                         'log_store': "elephant"}

    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True}}
}

__app_logging = {'handlers': ['console', 'sls_handler'],
                 'level': log_level,
                 'propagate': True}

START_APP.append('elephant')
for app in START_APP:
    LOGGING.get('loggers').update({app: __app_logging})
